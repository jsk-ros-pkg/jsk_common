#!/usr/bin/env python

import sys
import paramiko
import os
from optparse import OptionParser

CPU_COUNT_COMMAND = 'python -c "import multiprocessing; print multiprocessing.cpu_count()"'

def parse_options():
    parser = OptionParser()
    parser.add_option("-i", "--input", dest = "input",
                      default = os.path.join(os.environ["HOME"],
                                             ".cssh-clusters"),
                      help = """input cssh configuration file.
it defaults to ~/.cssh-clusters""")
    # parser.add_option("-o", "--output", dest = "output",
    #                   help = "output pythonscript path")
    parser.add_option("-g", "--group", dest = "group",
                      help = "specify the group of the cssh cluster")
    (options, args) = parser.parse_args()
    if not options.group:
        parser.print_help()
        sys.exit(1)
    return options

def parse_cssh_config(config_file, group):
    infile = open(config_file, "r")
    while True:
        org_line = infile.readline()
        line = org_line.strip() # remove white chars
        if org_line == "":
            raise Exception("cannot find group %s at %s" % (group,
                                                            config_file))
        elif line.startswith(group):
            # matched!
            return line.split()[1:]

def collect_cpuinfo(host):
    try:
        client = paramiko.SSHClient()
        client.load_system_host_keys()
        sys.stderr.write("[%s] connecting\n" % (host))
        client.connect(host)
        sys.stderr.write("[%s] connection established\n" % (host))
        (ssh_stdin, ssh_stdout, ssh_stderr) = client.exec_command(CPU_COUNT_COMMAND)
        cpu_num = int(ssh_stdout.readline())
        return [host, cpu_num]
    except Exception:
        sys.stderr.write("[%s] connection missed\n" % (host))
        return [host, False]
        
def main():
    options = parse_options()
    ssh_targets = parse_cssh_config(options.input, options.group)
    cpuinfos = [collect_cpuinfo(host) for host in ssh_targets]
    valid_cpuinfos = [info for info in cpuinfos if info[1] != False]
    launchservices = ["--launchservice='%s*%s'" % (info[1], info[0])
                      for info in valid_cpuinfos]
    print "rosrun  openrave_database kinematicreachability_ros.py " + " ".join(launchservices)
    
if __name__ == "__main__":
    main()
