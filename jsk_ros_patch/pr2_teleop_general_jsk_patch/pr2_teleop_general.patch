Index: launch/pr2_teleop_general_joystick.launch
===================================================================
--- launch/pr2_teleop_general_joystick.launch	(revision 53700)
+++ launch/pr2_teleop_general_joystick.launch	(working copy)
@@ -27,7 +27,7 @@
   	<param name="controller_name" type="string" value="arm_controller"/>
   </node>
 
-  <node pkg="pr2_teleop_general" type="pr2_teleop_general_joystick" name="pr2_teleop_general_joystick" output="screen">
+  <node pkg="pr2_teleop_general_jsk_patch" type="pr2_teleop_general_joystick" name="pr2_teleop_general_joystick" output="screen">
   	<param name="control_body" type="bool" value="true"/>
         <param name="control_head" type="bool" value="true"/>
         <param name="control_larm" type="bool" value="true"/>
Index: include/pr2_teleop_general/pr2_teleop_general_commander.h
===================================================================
--- include/pr2_teleop_general/pr2_teleop_general_commander.h	(revision 53700)
+++ include/pr2_teleop_general/pr2_teleop_general_commander.h	(working copy)
@@ -130,8 +130,8 @@
 
   void updateCurrentWristPositions();
 
-  void sendArmVelCommands(double r_x_vel, double r_y_vel, double r_z_vel, double r_yaw_vel, 
-                          double l_x_vel, double l_y_vel, double l_z_vel, double l_yaw_vel,
+  void sendArmVelCommands(double r_x_vel, double r_y_vel, double r_z_vel, double r_roll_vel, double r_pitch_vel, double r_yaw_vel,
+                          double l_x_vel, double l_y_vel, double l_z_vel, double l_roll_vel, double l_pitch_vel, double l_yaw_vel,
                           double hz);
 
   bool moveToWalkAlongArmPose();
Index: manifest.xml
===================================================================
--- manifest.xml	(revision 53700)
+++ manifest.xml	(working copy)
@@ -19,10 +19,12 @@
   <depend package="pr2_controller_manager" />
   <depend package="pr2_mechanism_msgs" />
   <depend package="kinematics_msgs" />
+  <depend package="angles" />
   <depend package="urdf" />
   <depend package="ps3joy" />
   <depend package="pr2_common_action_msgs" />
   <depend package="polled_camera" />
+  <depend package="bullet" />
 
   <export>
     <cpp cflags="-I${prefix}/include" lflags="-L${prefix}/lib"/>
Index: src/pr2_teleop_general_joystick.cpp
===================================================================
--- src/pr2_teleop_general_joystick.cpp	(revision 53700)
+++ src/pr2_teleop_general_joystick.cpp	(working copy)
@@ -63,12 +63,14 @@
 static const unsigned int OPEN_GRIPPER_BUTTON = 15;
 static const unsigned int CLOSE_GRIPPER_BUTTON = 13;
 static const unsigned int ARM_MODE_TOGGLE_BUTTON = 4;
+static const unsigned int ARM_POSE_BUTTON = 6;
 
 static const unsigned int LEFT_AXIS_NUMBER = 1;
 static const unsigned int RIGHT_AXIS_NUMBER = 1;
 
 static const unsigned int TORSO_UP_BUTTON = 12;
 static const unsigned int TORSO_DOWN_BUTTON = 14;
+static const unsigned int SPEED_UP_BUTTON = 11;
 
 static const unsigned int WRIST_CLOCKWISE_BUTTON = 12;
 static const unsigned int WRIST_COUNTER_BUTTON = 14;
@@ -132,6 +134,10 @@
     n_local.param("arm_y_scale", arm_y_scale_, .15);
     n_local.param("arm_z_scale", arm_z_scale_, .15);
 
+    n_local.param("arm_roll_scale", arm_roll_scale_, -1.50);
+    n_local.param("arm_pitch_scale", arm_pitch_scale_, 1.50);
+    n_local.param("arm_yaw_scale", arm_yaw_scale_, 1.50);
+
     n_local.param("wrist_velocity",wrist_velocity_, 4.5);
 
     n_local.param("walk_along_x_speed_scale", walk_along_x_speed_scale_, 9.0);
@@ -280,6 +286,12 @@
 	left_arm_vx_ = 0.0;
 	left_arm_vy_ = 0.0;
 	left_arm_vz_ = 0.0;
+	right_arm_vel_roll_ = 0.0;
+	right_arm_vel_pitch_ = 0.0;
+	right_arm_vel_yaw_ = 0.0;
+	left_arm_vel_roll_ = 0.0;
+	left_arm_vel_pitch_ = 0.0;
+	left_arm_vel_yaw_ = 0.0;
 	in_walk_along = true;
       }
     }
@@ -396,6 +408,8 @@
     if(!in_walk_along && layout == LAYOUT_BODY) {
       bool down = buttonOkAndOn(TORSO_DOWN_BUTTON, joy_msg);
       bool up = buttonOkAndOn(TORSO_UP_BUTTON, joy_msg);
+      bool speedup = buttonOkAndOn(SPEED_UP_BUTTON, joy_msg);
+      bool unsafe = buttonOkAndOn(RIGHT_ARM_LAYOUT_BUTTON, joy_msg); // for jsk_pr2_startup
       
       //ROS_INFO_STREAM("Down is " << down);
       //ROS_INFO_STREAM("Up is " << up);
@@ -409,17 +423,17 @@
         des_torso_vel_ = 0.0;
       }
       if(axisOk(VX_AXIS, joy_msg)) {
-        des_vx_ = joy_msg->axes[VX_AXIS]*vx_scale_;
+        des_vx_ = joy_msg->axes[VX_AXIS]*vx_scale_*(unsafe?0.5:(speedup?2.0:1.0));
       } else {
         des_vx_ = 0.0;
       }
       if(axisOk(VY_AXIS, joy_msg)) {
-        des_vy_ = joy_msg->axes[VY_AXIS]*vy_scale_;
+        des_vy_ = joy_msg->axes[VY_AXIS]*vy_scale_*(unsafe?0.5:(speedup?2.0:1.0));
       } else {
         des_vy_ = 0.0;
       }
       if(axisOk(VW_AXIS, joy_msg)) {
-        des_vw_ = joy_msg->axes[VW_AXIS]*vw_scale_;
+        des_vw_ = joy_msg->axes[VW_AXIS]*vw_scale_*(unsafe?0.5:(speedup?2.0:1.0));
       } else {
         des_vw_ = 0.0;
       }
@@ -464,6 +478,7 @@
         bool lookAnalog = false;
         bool rotClock = buttonOkAndOn(WRIST_CLOCKWISE_BUTTON, joy_msg);
         bool rotCounter = buttonOkAndOn(WRIST_COUNTER_BUTTON, joy_msg);
+	bool rotateArm = buttonOkAndOn(ARM_POSE_BUTTON, joy_msg);
         if(rotClock && !rotCounter) {
           des_right_wrist_vel_ = wrist_velocity_;
         } else if(!rotClock && rotCounter) {
@@ -472,29 +487,35 @@
           des_right_wrist_vel_ = 0.0;
           lookAnalog = true;
         }
+
+	right_arm_vx_ = 0.0;
+	right_arm_vy_ = 0.0;
+	right_arm_vz_ = 0.0;
+	right_arm_vel_roll_ = 0.0;
+	right_arm_vel_pitch_ = 0.0;
+	right_arm_vel_yaw_ = 0.0;
         
         if(lookAnalog) {
           //look at analog sticks if we aren't supposed to wrist rotate
           if(axisOk(ARM_X_AXIS, joy_msg)) {
-            right_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
-          } else {
-            right_arm_vx_ = 0.0;
+	    if(!rotateArm)
+	      right_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    else
+	      right_arm_vel_pitch_ = joy_msg->axes[ARM_X_AXIS]*arm_pitch_scale_;
           }
           if(axisOk(ARM_Y_AXIS, joy_msg)) {
-            right_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
-          } else {
-            right_arm_vy_ = 0.0;
+	    if(!rotateArm)
+	      right_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    else
+	      right_arm_vel_roll_ = joy_msg->axes[ARM_Y_AXIS]*arm_roll_scale_;
           }
-          if(axisOk(ARM_Z_AXIS, joy_msg)) {
-            right_arm_vz_ = joy_msg->axes[ARM_Z_AXIS]*arm_z_scale_;
-          } else {
-            right_arm_vz_ = 0.0;
+          if(axisOk(ARM_Z_AXIS, joy_msg) && (!rotateArm)) {
+	    right_arm_vz_ = joy_msg->axes[ARM_Z_AXIS]*arm_z_scale_;
           }
+          if(axisOk(ARM_YAW_AXIS, joy_msg) && rotateArm) {
+	    right_arm_vel_yaw_ = joy_msg->axes[ARM_YAW_AXIS]*arm_yaw_scale_;
+	  }
           //ROS_INFO_STREAM("Setting vx " << right_arm_vx_ << " " << right_arm_vy_ << " " << right_arm_vz_);
-        } else {
-          right_arm_vx_ = 0.0;
-          right_arm_vy_ = 0.0;
-          right_arm_vz_ = 0.0;
         }
       }
     } else if (layout != LAYOUT_BOTH_ARMS) {
@@ -502,6 +523,9 @@
       right_arm_vx_ = 0.0;
       right_arm_vy_ = 0.0;
       right_arm_vz_ = 0.0;
+      right_arm_vel_roll_ = 0.0;
+      right_arm_vel_pitch_ = 0.0;
+      right_arm_vel_yaw_ = 0.0;
     }
     if(layout == LAYOUT_LEFT_ARM) {
       if(buttonOkAndOn(ARM_MODE_TOGGLE_BUTTON, joy_msg) && !sameValueAsLast(ARM_MODE_TOGGLE_BUTTON, joy_msg, last_joy_)) {
@@ -536,6 +560,7 @@
         bool lookAnalog = false;
         bool rotClock = buttonOkAndOn(WRIST_CLOCKWISE_BUTTON, joy_msg);
         bool rotCounter = buttonOkAndOn(WRIST_COUNTER_BUTTON, joy_msg);
+	bool rotateArm = buttonOkAndOn(ARM_POSE_BUTTON, joy_msg);
         if(rotClock && !rotCounter) {
           des_left_wrist_vel_ = wrist_velocity_;
         } else if(!rotClock && rotCounter) {
@@ -544,29 +569,35 @@
           des_left_wrist_vel_ = 0.0;
           lookAnalog = true;
         }
+
+	left_arm_vx_ = 0.0;
+	left_arm_vy_ = 0.0;
+	left_arm_vz_ = 0.0;
+	left_arm_vel_roll_ = 0.0;
+	left_arm_vel_pitch_ = 0.0;
+	left_arm_vel_yaw_ = 0.0;
         
         if(lookAnalog) {
           //look at analog sticks if we aren't supposed to wrist rotate
           if(axisOk(ARM_X_AXIS, joy_msg)) {
-            left_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
-          } else {
-            left_arm_vx_ = 0.0;
+	    if(!rotateArm)
+	      left_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    else
+	      left_arm_vel_pitch_ = joy_msg->axes[ARM_X_AXIS]*arm_pitch_scale_;
           }
           if(axisOk(ARM_Y_AXIS, joy_msg)) {
-            left_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
-          } else {
-            left_arm_vy_ = 0.0;
+	    if(!rotateArm)
+	      left_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    else
+	      left_arm_vel_roll_ = joy_msg->axes[ARM_Y_AXIS]*arm_roll_scale_;
           }
-          if(axisOk(ARM_Z_AXIS, joy_msg)) {
+          if(axisOk(ARM_Z_AXIS, joy_msg) && (!rotateArm)) {
             left_arm_vz_ = joy_msg->axes[ARM_Z_AXIS]*arm_z_scale_;
-          } else {
-            left_arm_vz_ = 0.0;
           }
+          if(axisOk(ARM_YAW_AXIS, joy_msg) && rotateArm) {
+	    left_arm_vel_yaw_ = joy_msg->axes[ARM_YAW_AXIS]*arm_yaw_scale_;
+	  }
           //ROS_INFO_STREAM("Setting vx " << left_arm_vx_ << " " << left_arm_vy_ << " " << left_arm_vz_);
-        } else {
-          left_arm_vx_ = 0.0;
-          left_arm_vy_ = 0.0;
-          left_arm_vz_ = 0.0;
         }
       }
     } else if (layout != LAYOUT_BOTH_ARMS) {
@@ -574,6 +605,9 @@
       left_arm_vx_ = 0.0;
       left_arm_vy_ = 0.0;
       left_arm_vz_ = 0.0;
+      left_arm_vel_roll_ = 0.0;
+      left_arm_vel_pitch_ = 0.0;
+      left_arm_vel_yaw_ = 0.0;
     }
     if(layout == LAYOUT_BOTH_ARMS) {
       if(buttonOkAndOn(ARM_MODE_TOGGLE_BUTTON, joy_msg) && !sameValueAsLast(ARM_MODE_TOGGLE_BUTTON, joy_msg, last_joy_)) {
@@ -612,6 +646,7 @@
         bool lookAnalog = false;
         bool rotClock = buttonOkAndOn(WRIST_CLOCKWISE_BUTTON, joy_msg);
         bool rotCounter = buttonOkAndOn(WRIST_COUNTER_BUTTON, joy_msg);
+        bool rotateArm = buttonOkAndOn(ARM_POSE_BUTTON, joy_msg);
         if(rotClock && !rotCounter) {
           des_left_wrist_vel_ = wrist_velocity_;
           des_right_wrist_vel_ = wrist_velocity_;
@@ -623,38 +658,49 @@
           des_right_wrist_vel_ = 0.0;
           lookAnalog = true;
         }
+
+	left_arm_vx_ = 0.0;
+	left_arm_vy_ = 0.0;
+	left_arm_vz_ = 0.0;
+	right_arm_vx_ = 0.0;
+	right_arm_vy_ = 0.0;
+	right_arm_vz_ = 0.0;
+	left_arm_vel_roll_ = 0.0;
+	left_arm_vel_pitch_ = 0.0;
+	left_arm_vel_yaw_ = 0.0;
+	right_arm_vel_roll_ = 0.0;
+	right_arm_vel_pitch_ = 0.0;
+	right_arm_vel_yaw_ = 0.0;
         
         if(lookAnalog) {
           //look at analog sticks if we aren't supposed to wrist rotate
           if(axisOk(ARM_X_AXIS, joy_msg)) {
-            left_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
-            right_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
-          } else {
-            left_arm_vx_ = 0.0;
-            right_arm_vz_ = 0.0;
+	    if(!rotateArm) {
+	      left_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	      right_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    } else {
+	      left_arm_vel_pitch_ = joy_msg->axes[ARM_X_AXIS]*arm_pitch_scale_;
+	      right_arm_vel_pitch_ = joy_msg->axes[ARM_X_AXIS]*arm_pitch_scale_;
+	    }
           }
           if(axisOk(ARM_Y_AXIS, joy_msg)) {
-            left_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
-            right_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
-          } else {
-            left_arm_vy_ = 0.0;
-            right_arm_vz_ = 0.0;
+	    if(!rotateArm) {
+	      left_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	      right_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    } else {
+	      left_arm_vel_roll_ = joy_msg->axes[ARM_Y_AXIS]*arm_roll_scale_;
+	      right_arm_vel_roll_ = joy_msg->axes[ARM_Y_AXIS]*arm_roll_scale_;
+	    }
           }
-          if(axisOk(ARM_Z_AXIS, joy_msg)) {
+          if(axisOk(ARM_Z_AXIS, joy_msg) && (!rotateArm)) {
             left_arm_vz_ = joy_msg->axes[ARM_Z_AXIS]*arm_z_scale_;
             right_arm_vz_ = joy_msg->axes[ARM_Z_AXIS]*arm_z_scale_;
-          } else {
-            left_arm_vz_ = 0.0;
-            right_arm_vz_ = 0.0;
           }
+          if(axisOk(ARM_YAW_AXIS, joy_msg) && rotateArm) {
+	    left_arm_vel_yaw_ = joy_msg->axes[ARM_YAW_AXIS]*arm_yaw_scale_;
+	    right_arm_vel_yaw_ = joy_msg->axes[ARM_YAW_AXIS]*arm_yaw_scale_;
+	  }
         //ROS_INFO_STREAM("Setting vx " << left_arm_vx_ << " " << left_arm_vy_ << " " << left_arm_vz_);
-        } else {
-          left_arm_vx_ = 0.0;
-          left_arm_vy_ = 0.0;
-          left_arm_vz_ = 0.0;
-          right_arm_vx_ = 0.0;
-          right_arm_vy_ = 0.0;
-          right_arm_vz_ = 0.0;
         }
       }
     } else if (layout != LAYOUT_RIGHT_ARM && layout != LAYOUT_LEFT_ARM) {
@@ -666,6 +712,12 @@
       right_arm_vx_ = 0.0;
       right_arm_vy_ = 0.0;
       right_arm_vz_ = 0.0;
+      left_arm_vel_roll_ = 0.0;
+      left_arm_vel_pitch_ = 0.0;
+      left_arm_vel_yaw_ = 0.0;
+      right_arm_vel_roll_ = 0.0;
+      right_arm_vel_pitch_ = 0.0;
+      right_arm_vel_yaw_ = 0.0;
     }
 
     joy_deadman_ = ros::Time::now();
@@ -739,6 +791,9 @@
   double arm_x_scale_;
   double arm_y_scale_;
   double arm_z_scale_;
+  double arm_roll_scale_;
+  double arm_pitch_scale_;
+  double arm_yaw_scale_;
 
   double right_arm_vx_;
   double right_arm_vy_;
@@ -748,6 +803,14 @@
   double left_arm_vy_;
   double left_arm_vz_;
 
+  double right_arm_vel_roll_;
+  double right_arm_vel_pitch_;
+  double right_arm_vel_yaw_;
+
+  double left_arm_vel_roll_;
+  double left_arm_vel_pitch_;
+  double left_arm_vel_yaw_;
+
   bool head_init_;
   bool torso_init_;
 
@@ -877,8 +940,8 @@
         //generaljoy.gc->updateCurrentWristPositions();
         generaljoy.gc->sendWristVelCommands(generaljoy.des_right_wrist_vel_, generaljoy.des_left_wrist_vel_, SlowHz);
         
-        generaljoy.gc->sendArmVelCommands(generaljoy.right_arm_vx_, generaljoy.right_arm_vy_, generaljoy.right_arm_vz_, 0.0,
-                                          generaljoy.left_arm_vx_, generaljoy.left_arm_vy_, generaljoy.left_arm_vz_, 0.0,
+        generaljoy.gc->sendArmVelCommands(generaljoy.right_arm_vx_, generaljoy.right_arm_vy_, generaljoy.right_arm_vz_, generaljoy.right_arm_vel_roll_, generaljoy.right_arm_vel_pitch_, generaljoy.right_arm_vel_yaw_,
+                                          generaljoy.left_arm_vx_, generaljoy.left_arm_vy_, generaljoy.left_arm_vz_, generaljoy.left_arm_vel_roll_, generaljoy.left_arm_vel_pitch_, generaljoy.left_arm_vel_yaw_,
                                           SlowHz);
       }
     }
Index: src/pr2_teleop_general_keyboard.cpp
===================================================================
--- src/pr2_teleop_general_keyboard.cpp	(revision 53700)
+++ src/pr2_teleop_general_keyboard.cpp	(working copy)
@@ -460,91 +460,91 @@
             break;
           case 'i':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                             generalkey->arm_x_scale_, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                             generalkey->arm_x_scale_, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(generalkey->arm_x_scale_,0.0,0.0,0.0,
-                                             0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(generalkey->arm_x_scale_,0.0,0.0,0.0,0.0,0.0,
+                                             0.0, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(generalkey->arm_x_scale_,0.0,0.0,0.0,
-                                             generalkey->arm_x_scale_, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(generalkey->arm_x_scale_,0.0,0.0,0.0,0.0,0.0,
+                                             generalkey->arm_x_scale_, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             }
             break;
           case 'k':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                             -generalkey->arm_x_scale_, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                             -generalkey->arm_x_scale_, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(-generalkey->arm_x_scale_,0.0,0.0,0.0,
-                                             0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(-generalkey->arm_x_scale_,0.0,0.0,0.0,0.0,0.0,
+                                             0.0, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(-generalkey->arm_x_scale_,0.0,0.0,0.0,
-                                             -generalkey->arm_x_scale_, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(-generalkey->arm_x_scale_,0.0,0.0,0.0,0.0,0.0,
+                                             -generalkey->arm_x_scale_, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             }
             break;
           case 'j':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                             0.0,generalkey->arm_y_scale_,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                             0.0,generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
                                              20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(0.0,generalkey->arm_y_scale_,0.0,0.0,
-                                             0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
+                                             0.0, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(0.0,generalkey->arm_y_scale_,0.0,0.0,
-                                                 0.0,generalkey->arm_y_scale_, 0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
+                                                 0.0,generalkey->arm_y_scale_, 0.0,0.0,0.0,0.0,
                                                  20.0);
             }
             break;
           case 'l':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                             0.0,-generalkey->arm_y_scale_,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                             0.0,-generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
                                              20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(0.0,-generalkey->arm_y_scale_,0.0,0.0,
-                                             0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,-generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
+                                             0.0, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(0.0,-generalkey->arm_y_scale_,0.0,0.0,
-                                                 0.0,-generalkey->arm_y_scale_, 0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,-generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
+                                                 0.0,-generalkey->arm_y_scale_, 0.0,0.0,0.0,0.0,
                                                  20.0);
             }
             break;
           case 'h':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                                 0.0,0.0,generalkey->arm_z_scale_,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                                 0.0,0.0,generalkey->arm_z_scale_,0.0,0.0,0.0,
                                                  20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,generalkey->arm_z_scale_,0.0,
-                                                 0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,generalkey->arm_z_scale_,0.0,0.0,0.0,
+                                                 0.0, 0.0,0.0,0.0,0.0,0.0,
                                                  20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,generalkey->arm_z_scale_,0.0,
-                                                 0.0,0.0,generalkey->arm_z_scale_, 0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,generalkey->arm_z_scale_,0.0,0.0,0.0,
+                                                 0.0,0.0,generalkey->arm_z_scale_, 0.0,0.0,0.0,
                                                  20.0);
             }
             break;
           case 'n':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                                 0.0,0.0,-generalkey->arm_z_scale_,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                                 0.0,0.0,-generalkey->arm_z_scale_,0.0,0.0,0.0,
                                                  20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,-generalkey->arm_z_scale_,0.0,
-                                                 0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,-generalkey->arm_z_scale_,0.0,0.0,0.0,
+                                                 0.0, 0.0,0.0,0.0,0.0,0.0,
                                                  20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,-generalkey->arm_z_scale_,0.0,
-                                                 0.0,0.0,-generalkey->arm_z_scale_, 0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,-generalkey->arm_z_scale_,0.0,0.0,0.0,
+                                                 0.0,0.0,-generalkey->arm_z_scale_, 0.0,0.0,0.0,
                                                  20.0);
             }
             break;
Index: src/pr2_teleop_general_commander.cpp
===================================================================
--- src/pr2_teleop_general_commander.cpp	(revision 53700)
+++ src/pr2_teleop_general_commander.cpp	(working copy)
@@ -32,6 +32,8 @@
 
 #include <string>
 #include <boost/bind.hpp>
+#include <LinearMath/btQuaternion.h>
+#include <LinearMath/btMatrix3x3.h>
 
 #include <pr2_mechanism_msgs/SwitchController.h>
 #include <geometry_msgs/Twist.h>
@@ -768,7 +770,11 @@
   if(control_rarm_) {
     tot_distance = sqrt(pow(des_r_wrist_roll_pose_.position.x-right_wrist_roll_pose_.position.x,2.0)+
                         pow(des_r_wrist_roll_pose_.position.y-right_wrist_roll_pose_.position.y,2.0)+
-                        pow(des_r_wrist_roll_pose_.position.z-right_wrist_roll_pose_.position.z,2.0));
+                        pow(des_r_wrist_roll_pose_.position.z-right_wrist_roll_pose_.position.z,2.0)+
+			pow(des_r_wrist_roll_pose_.orientation.x-right_wrist_roll_pose_.orientation.x,2.0)+
+			pow(des_r_wrist_roll_pose_.orientation.y-right_wrist_roll_pose_.orientation.y,2.0)+
+			pow(des_r_wrist_roll_pose_.orientation.z-right_wrist_roll_pose_.orientation.z,2.0)+
+			pow(des_r_wrist_roll_pose_.orientation.w-right_wrist_roll_pose_.orientation.w,2.0));
     
     //ROS_INFO_STREAM("Cur " << right_wrist_roll_pose_.position.x << " " << right_wrist_roll_pose_.position.y << " " << right_wrist_roll_pose_.position.z
     //                << " des " << des_r_wrist_roll_pose_.position.x << " " << des_r_wrist_roll_pose_.position.y << " " << des_r_wrist_roll_pose_.position.z);
@@ -801,7 +807,12 @@
   if(control_larm_) {
     tot_distance = sqrt(pow(des_l_wrist_roll_pose_.position.x-left_wrist_roll_pose_.position.x,2.0)+
                         pow(des_l_wrist_roll_pose_.position.y-left_wrist_roll_pose_.position.y,2.0)+
-                        pow(des_l_wrist_roll_pose_.position.z-left_wrist_roll_pose_.position.z,2.0));
+                        pow(des_l_wrist_roll_pose_.position.z-left_wrist_roll_pose_.position.z,2.0)+
+			pow(des_l_wrist_roll_pose_.orientation.x-left_wrist_roll_pose_.orientation.x,2.0)+
+			pow(des_l_wrist_roll_pose_.orientation.y-left_wrist_roll_pose_.orientation.y,2.0)+
+			pow(des_l_wrist_roll_pose_.orientation.z-left_wrist_roll_pose_.orientation.z,2.0)+
+			pow(des_l_wrist_roll_pose_.orientation.w-left_wrist_roll_pose_.orientation.w,2.0));
+
     
     if(tot_distance > max_dist) {
       des_l_wrist_roll_pose_ = left_wrist_roll_pose_;
@@ -880,8 +891,8 @@
   traj = unnormalized_trajectory; 
 }
 
-void GeneralCommander::sendArmVelCommands(double r_x_vel, double r_y_vel, double r_z_vel, double r_yaw_vel, 
-                                        double l_x_vel, double l_y_vel, double l_z_vel, double l_yaw_vel,
+void GeneralCommander::sendArmVelCommands(double r_x_vel, double r_y_vel, double r_z_vel, double r_roll_vel, double r_pitch_vel, double r_yaw_vel,
+					  double l_x_vel, double l_y_vel, double l_z_vel, double l_roll_vel, double l_pitch_vel, double l_yaw_vel,
                                         double hz) {
 
 
@@ -890,12 +901,12 @@
   double trajectory_duration = .2;
 
   //ROS_INFO_STREAM("Got vels " << r_x_vel << " " << r_y_vel << " " << r_z_vel);
-
   clampDesiredArmPositionsToActual(.1);
 
   if(control_rarm_) {
     
-    if(fabs(r_x_vel) > .001 || fabs(r_y_vel) > .001 || fabs(r_z_vel) > .001) {
+    if(fabs(r_x_vel) > .001 || fabs(r_y_vel) > .001 || fabs(r_z_vel) > .001 ||
+       fabs(r_roll_vel) > .001 || fabs(r_pitch_vel) > .001 || fabs(r_yaw_vel) > .001) {
       
       geometry_msgs::Pose right_trajectory_endpoint = des_r_wrist_roll_pose_;
       
@@ -907,16 +918,44 @@
       double pos_diff_x = r_x_vel*(1.0/hz);//*look_ahead;
       double pos_diff_y = r_y_vel*(1.0/hz);//*look_ahead;
       double pos_diff_z = r_z_vel*(1.0/hz);//*look_ahead;
-      //double pos_diff_yaw = r_yaw_vel;//*(1.0/hz);//*look_ahead;
-      
+      double pos_diff_roll = r_roll_vel*(1.0/hz);//*look_ahead;
+      double pos_diff_pitch = r_pitch_vel*(1.0/hz);//*look_ahead;
+      double pos_diff_yaw = r_yaw_vel;//*(1.0/hz);//*look_ahead;
+
+      btQuaternion endpoint_quat, des_quat;
+      btMatrix3x3 end_rot, des_rot, diff_rot, duration_rot;
+      end_rot.setRotation(btQuaternion(
+			      right_trajectory_endpoint.orientation.x,
+			      right_trajectory_endpoint.orientation.y,
+			      right_trajectory_endpoint.orientation.z,
+			      right_trajectory_endpoint.orientation.w));
+      des_rot = end_rot;
+      duration_rot.setEulerYPR(r_yaw_vel*trajectory_duration,
+			       r_pitch_vel*trajectory_duration,
+			       r_roll_vel*trajectory_duration);
+      diff_rot.setEulerYPR(pos_diff_yaw, pos_diff_pitch, pos_diff_roll);
+
+      (duration_rot *= end_rot).getRotation(endpoint_quat);
+      (diff_rot *= des_rot).getRotation(des_quat);
+
       right_trajectory_endpoint.position.x += r_x_vel*trajectory_duration;
       right_trajectory_endpoint.position.y += r_y_vel*trajectory_duration;
       right_trajectory_endpoint.position.z += r_z_vel*trajectory_duration;
+
+      right_trajectory_endpoint.orientation.x = endpoint_quat.getAxis().getX();
+      right_trajectory_endpoint.orientation.y = endpoint_quat.getAxis().getY();
+      right_trajectory_endpoint.orientation.z = endpoint_quat.getAxis().getZ();
+      right_trajectory_endpoint.orientation.w = endpoint_quat.getW();
       
       des_r_wrist_roll_pose_.position.x += pos_diff_x;
       des_r_wrist_roll_pose_.position.y += pos_diff_y;
       des_r_wrist_roll_pose_.position.z += pos_diff_z;
       
+      des_r_wrist_roll_pose_.orientation.x = des_quat.getAxis().getX();
+      des_r_wrist_roll_pose_.orientation.y = des_quat.getAxis().getY();
+      des_r_wrist_roll_pose_.orientation.z = des_quat.getAxis().getZ();
+      des_r_wrist_roll_pose_.orientation.w = des_quat.getW();
+
       //ROS_INFO_STREAM("Desired " << des_r_wrist_roll_pose_.position.x << " " << des_r_wrist_roll_pose_.position.y << " " << des_r_wrist_roll_pose_.position.z);
       
       //todo - figure out yaw
@@ -985,7 +1024,8 @@
     ros::Time afterCall = ros::Time::now();
   }
   if(control_larm_) {
-    if(fabs(l_x_vel) > .001 || fabs(l_y_vel) > .001 || fabs(l_z_vel) > .001) {
+    if(fabs(l_x_vel) > .001 || fabs(l_y_vel) > .001 || fabs(l_z_vel) > .001 ||
+       fabs(l_roll_vel) > .001 || fabs(l_pitch_vel) > .001 || fabs(l_yaw_vel) > .001) {
 
       geometry_msgs::Pose left_trajectory_endpoint = des_l_wrist_roll_pose_;
 
@@ -997,15 +1037,44 @@
       double pos_diff_x = l_x_vel*(1.0/hz);
       double pos_diff_y = l_y_vel*(1.0/hz);
       double pos_diff_z = l_z_vel*(1.0/hz);
-      //double pos_diff_yaw = l_yaw_vel*(1.0/hz);
+      double pos_diff_roll = l_roll_vel*(1.0/hz);//*look_ahead;
+      double pos_diff_pitch = l_pitch_vel*(1.0/hz);//*look_ahead;
+      double pos_diff_yaw = l_yaw_vel*(1.0/hz);
+
+      btQuaternion endpoint_quat, des_quat;
+      btMatrix3x3 end_rot, des_rot, diff_rot, duration_rot;
+      end_rot.setRotation(btQuaternion(
+			      left_trajectory_endpoint.orientation.x,
+			      left_trajectory_endpoint.orientation.y,
+			      left_trajectory_endpoint.orientation.z,
+			      left_trajectory_endpoint.orientation.w));
+      des_rot = end_rot;
+      duration_rot.setEulerYPR(l_yaw_vel*trajectory_duration,
+			       l_pitch_vel*trajectory_duration,
+			       l_roll_vel*trajectory_duration);
+      diff_rot.setEulerYPR(pos_diff_yaw, pos_diff_pitch, pos_diff_roll);
+
+      (duration_rot *= end_rot).getRotation(endpoint_quat);
+      (diff_rot *= des_rot).getRotation(des_quat);
     
       left_trajectory_endpoint.position.x += l_x_vel*trajectory_duration;
       left_trajectory_endpoint.position.y += l_y_vel*trajectory_duration;
       left_trajectory_endpoint.position.z += l_z_vel*trajectory_duration;
 
+      left_trajectory_endpoint.orientation.x = endpoint_quat.getAxis().getX();
+      left_trajectory_endpoint.orientation.y = endpoint_quat.getAxis().getY();
+      left_trajectory_endpoint.orientation.z = endpoint_quat.getAxis().getZ();
+      left_trajectory_endpoint.orientation.w = endpoint_quat.getW();
+
       des_l_wrist_roll_pose_.position.x += pos_diff_x;
       des_l_wrist_roll_pose_.position.y += pos_diff_y;
       des_l_wrist_roll_pose_.position.z += pos_diff_z;
+
+      des_l_wrist_roll_pose_.orientation.x = des_quat.getAxis().getX();
+      des_l_wrist_roll_pose_.orientation.y = des_quat.getAxis().getY();
+      des_l_wrist_roll_pose_.orientation.z = des_quat.getAxis().getZ();
+      des_l_wrist_roll_pose_.orientation.w = des_quat.getW();
+
       //todo - figure out yaw
 
       //now call ik
@@ -1032,7 +1101,6 @@
         }
       }
     
-    
       //otherwise not a lot to be done
       if(left_arm_kinematics_inverse_client_.call(ik_req, ik_res) && ik_res.error_code.val == ik_res.error_code.SUCCESS) {
         //ROS_INFO("Ik succeeded");
